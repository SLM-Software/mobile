var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import _ from 'lodash';
import { MultiPickerUtils } from '../../../util';
import { MultiPickerColumn } from '../multi-picker-columns';
export var MultiPickerColumnMinutes = (function (_super) {
    __extends(MultiPickerColumnMinutes, _super);
    function MultiPickerColumnMinutes(attrs) {
        _super.call(this, attrs);
        this.name = 'minutes';
        this.existingMinutes = {};
        this.minHour = this.min.hour();
        this.minMinute = this.min.minute();
        this.maxHour = this.max.hour();
        this.maxMinute = this.max.minute();
        _a = this.max.hour() > this.min.hour() ? [0, 59] : [this.minMinute, this.maxMinute], this.firstOptionValue = _a[0], this.lastOptionValue = _a[1];
        var _a;
    }
    Object.defineProperty(MultiPickerColumnMinutes.prototype, "minuteRounding", {
        get: function () { return this.step; },
        enumerable: true,
        configurable: true
    });
    MultiPickerColumnMinutes.prototype.filter = function (hour) {
        return this.filterLimits(hour).values;
    };
    MultiPickerColumnMinutes.prototype.filterLimits = function (hour) {
        var _this = this;
        if (!this.existingMinutes[hour]) {
            this.generateOptions();
            var existingMinutes = this.values;
            if (hour < this.minHour || this.maxHour < hour)
                existingMinutes = [];
            else if (hour == this.minHour && this.minMinute != 0)
                existingMinutes = _.filter(this.values, function (minute) { return minute >= _this.minMinute; });
            else if (hour == this.maxHour && this.maxMinute != 59)
                existingMinutes = _.filter(this.values, function (minute) { return minute <= _this.maxMinute; });
            this.existingMinutes[hour] = _super.prototype.toOptions.call(this, existingMinutes);
        }
        this.options = this.existingMinutes[hour];
        return this;
    };
    MultiPickerColumnMinutes.prototype.round = function (val) {
        return MultiPickerUtils.minuteRound(val, this.minuteRounding);
    };
    MultiPickerColumnMinutes.prototype.optionText = function (num) {
        return _.padStart("" + num, 2, '0');
    };
    return MultiPickerColumnMinutes;
}(MultiPickerColumn));
//# sourceMappingURL=minutes.js.map