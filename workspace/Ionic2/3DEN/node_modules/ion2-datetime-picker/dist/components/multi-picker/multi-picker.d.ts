import { AfterContentInit, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { ControlValueAccessor, FormControl } from '@angular/forms';
import { Picker, PickerController, Form, Item } from 'ionic-angular';
import moment from 'moment';
export interface ChangingValuePart {
    columnIndex: number;
    text: string;
    value: number;
}
export interface ChangingValue {
    minute?: ChangingValuePart;
    hour?: ChangingValuePart;
    day?: ChangingValuePart;
    month?: ChangingValuePart;
    year?: ChangingValuePart;
}
export declare const MULTI_PICKER_VALUE_ACCESSOR: any;
export declare class MultiPicker implements AfterContentInit, ControlValueAccessor, OnDestroy, OnInit {
    private _form;
    private _item;
    private _pickerCtrl;
    static YEAR_ROUND: number;
    _disabled: any;
    _labelId: string;
    _text: string;
    _fn: Function;
    _isOpen: boolean;
    _value: any;
    id: string;
    private multiPickerType;
    private dateContext;
    cancelText: string;
    doneText: string;
    formControl: FormControl;
    customFilterDays: Function;
    dateContextAttr: moment.Moment | string;
    weekends: string | string[];
    type: string;
    displayFormat: string;
    pickerFormat: string;
    min: moment.Moment;
    max: moment.Moment;
    minuteRounding: string | number;
    disabled: boolean;
    ionChange: EventEmitter<any>;
    ionCancel: EventEmitter<any>;
    constructor(_form: Form, _item: Item, _pickerCtrl: PickerController);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    _click(ev: UIEvent): void;
    _keyup(): void;
    open(): void;
    generate(picker: Picker): void;
    validateColumns(picker: Picker): void;
    setDateContext(): void;
    convertLimits(): void;
    divyColumns(picker: Picker): void;
    setValue(newData: ChangingValue): void;
    checkHasValue(inputValue: any): void;
    updateText(): void;
    convertObjectToString(newData: ChangingValue): string;
    static throw(msg: any): void;
    writeValue(val: ChangingValue): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: any): void;
    ngOnDestroy(): void;
    onChange(val: ChangingValue): void;
    onTouched(): void;
}
