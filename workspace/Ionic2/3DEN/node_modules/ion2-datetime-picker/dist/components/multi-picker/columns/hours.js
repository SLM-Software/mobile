var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as _ from 'lodash';
import { MultiPickerColumn } from '../multi-picker-columns';
export var MultiPickerColumnHours = (function (_super) {
    __extends(MultiPickerColumnHours, _super);
    function MultiPickerColumnHours() {
        _super.apply(this, arguments);
        this.minHour = this.min.hour();
        this.maxHour = this.max.hour();
        this.existingHours = {};
        this.name = 'hours';
        this.firstOptionValue = this.minHour;
        this.lastOptionValue = this.maxHour;
    }
    MultiPickerColumnHours.prototype.filter = function (noon) {
        return this.filterMeridiem(noon).values;
    };
    MultiPickerColumnHours.prototype.filterMeridiem = function (noon) {
        if (!this.format.is12)
            return this;
        if (!this.existingHours[noon]) {
            this.generateOptions();
            var _a = [_.max([noon * 12, this.minHour]), _.min([(noon + 1) * 12 - 1, this.maxHour])], min_1 = _a[0], max_1 = _a[1];
            this.existingHours[noon] = _.filter(this.values, function (hour) {
                return min_1 <= hour && hour <= max_1;
            });
            this.existingHours[noon] = _super.prototype.toOptions.call(this, this.existingHours[noon]);
        }
        this.options = this.existingHours[noon];
        return this;
    };
    MultiPickerColumnHours.prototype.optionText = function (num) {
        if (!this.format.is12)
            return "" + num;
        var hourIn12 = num % 12;
        return _.padStart("" + (hourIn12 == 0 ? 12 : hourIn12), 2, '0');
    };
    return MultiPickerColumnHours;
}(MultiPickerColumn));
//# sourceMappingURL=hours.js.map