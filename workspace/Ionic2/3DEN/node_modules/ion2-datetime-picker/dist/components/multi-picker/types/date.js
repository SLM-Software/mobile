var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import moment from 'moment';
import { MultiPickerType } from '../multi-picker-types';
import { MultiPickerColumnDays } from '../columns/days';
import { MultiPickerColumnMonths } from '../columns/months';
import { MultiPickerColumnYears } from '../columns/years';
export var MultiPickerTypeDate = (function (_super) {
    __extends(MultiPickerTypeDate, _super);
    function MultiPickerTypeDate(cmpAttrs) {
        _super.call(this);
        var customFilterDays = cmpAttrs.customFilterDays, weekends = cmpAttrs.weekends, pickerFormat = cmpAttrs.pickerFormat;
        this._columns = {
            daysCol: new MultiPickerColumnDays({ customFilterDays: customFilterDays, weekends: weekends }),
            monthsCol: new MultiPickerColumnMonths({ pickerFormat: pickerFormat }),
            yearsCol: new MultiPickerColumnYears({})
        };
        this.generateOptions();
    }
    MultiPickerTypeDate.prototype.validate = function (columns, pickerValue) {
        var currentMoment = this.currentMoment(columns, pickerValue);
        this.disableInvalid(columns, 'daysCol', 0, [currentMoment.months, currentMoment.years]);
    };
    MultiPickerTypeDate.prototype.defaultMoment = function (pickerValue) {
        var defaultMoment;
        defaultMoment = (pickerValue ? moment(pickerValue) : moment()).toObject();
        defaultMoment.months++;
        return defaultMoment;
    };
    return MultiPickerTypeDate;
}(MultiPickerType));
//# sourceMappingURL=date.js.map