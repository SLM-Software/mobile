import * as moment from 'moment';
export interface IMultiPickerOption {
    text?: string;
    value?: any;
    parentVal?: any | Array<any>;
    disabled?: boolean;
}
export interface IColumnFormat {
    is12: boolean;
    noons: Array<string>;
    hours: number;
    displayFormat: string;
    pickerFormat: string;
}
export interface IColumnAttrs {
    name?: string;
    firstOptionValue?: number;
    lastOptionValue?: number;
    step?: number;
    format?: IColumnFormat;
    min?: moment.Moment;
    max?: moment.Moment;
}
export interface IMultiPickerColumn extends IColumnAttrs {
    options: IMultiPickerOption[];
}
export declare class MultiPickerColumn implements IMultiPickerColumn {
    static readonly defaultFormat: IColumnFormat;
    name: string;
    firstOptionValue: number;
    lastOptionValue: number;
    step: number;
    format: IColumnFormat;
    options: Array<IMultiPickerOption>;
    min: moment.Moment;
    max: moment.Moment;
    constructor(attrs: IColumnAttrs);
    readonly values: number[];
    protected generateOptions(): void;
    protected range(from: number, to: number): Array<IMultiPickerOption>;
    protected optionText(num: number): string;
    protected toOption(num: number): IMultiPickerOption;
    protected toOptions(nums: Array<number>): Array<IMultiPickerOption>;
}
