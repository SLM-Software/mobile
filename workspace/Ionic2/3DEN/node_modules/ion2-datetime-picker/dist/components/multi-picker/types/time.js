var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as moment from 'moment';
import * as _ from 'lodash';
import { MultiPickerUtils } from '../../../util';
import { MultiPickerColumn } from '../multi-picker-columns';
import { MultiPickerType } from '../multi-picker-types';
import { MultiPickerColumnMinutes } from '../columns/minutes';
import { MultiPickerColumnHours } from '../columns/hours';
import { MultiPickerColumnNoon } from '../columns/noon';
export var MultiPickerTypeTime = (function (_super) {
    __extends(MultiPickerTypeTime, _super);
    function MultiPickerTypeTime(cmpAttrs) {
        _super.call(this);
        this.format = MultiPickerColumn.defaultFormat;
        _a = [moment(cmpAttrs.min), moment(cmpAttrs.max), parseInt(cmpAttrs.minuteRounding)], this.min = _a[0], this.max = _a[1], this.minuteRounding = _a[2];
        this.parseFormat(cmpAttrs.pickerFormat);
        this._columns = {
            hoursCol: new MultiPickerColumnHours({ min: this.min, max: this.max, format: this.format }),
            minutesCol: new MultiPickerColumnMinutes({ min: this.min, max: this.max, step: this.minuteRounding })
        };
        if (this.format.is12)
            this._columns.noon = new MultiPickerColumnNoon({ min: this.min, max: this.max, format: this.format });
        this.generateOptions();
        var _a;
    }
    MultiPickerTypeTime.prototype.validate = function (columns, pickerValue) {
        var currentMoment = this.currentMoment(columns, pickerValue);
        this.disableInvalid(columns, 'minutesCol', 1, [currentMoment.hours]);
        if (this.format.is12)
            this.disableInvalid(columns, 'hoursCol', 0, [currentMoment.noon]);
    };
    MultiPickerTypeTime.prototype.dealDoneVisibleBnt = function (columns, button) { };
    MultiPickerTypeTime.prototype.defaultMoment = function (pickerValue) {
        var defaultMoment = pickerValue ? moment(pickerValue) : moment();
        if (this.min.isAfter(defaultMoment))
            defaultMoment = this.min;
        if (this.max.isBefore(defaultMoment))
            defaultMoment = this.max;
        defaultMoment = MultiPickerUtils.minuteRound(defaultMoment, this.minuteRounding);
        var defaultMomentObject = defaultMoment.toObject();
        if (this.format.is12)
            defaultMomentObject.noon = defaultMomentObject.hours >= 12 ? 1 : 0;
        return defaultMomentObject;
    };
    MultiPickerTypeTime.prototype.parseFormat = function (pickerFormat) {
        _.extend(this.format, {
            pickerFormat: pickerFormat.match(/[HhmAa\:]/g).join(''),
            is12: pickerFormat.includes('h'),
        });
        if (this.format.is12) {
            if (pickerFormat.includes('A'))
                this.format.noons = this.format.noons.map(_.upperCase);
            this.format.hours = 12;
        }
    };
    return MultiPickerTypeTime;
}(MultiPickerType));
//# sourceMappingURL=time.js.map