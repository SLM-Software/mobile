import * as _ from 'lodash';
import * as moment from 'moment';
export var MultiPickerType = (function () {
    function MultiPickerType() {
    }
    MultiPickerType.prototype.columns = function () {
        return this._columns;
    };
    MultiPickerType.prototype.dealDoneVisibleBnt = function (columns, button) {
        var isSomeDisabled = _.some(_.map(columns, function (col, index) { return col.options[col.selectedIndex].disabled; }));
        button.cssRole = isSomeDisabled ? 'hide' : '';
    };
    MultiPickerType.prototype.setDefaultSelectedIndexes = function (columns, pickerValue) {
        var defaultMoment = this.defaultMoment(pickerValue);
        _(columns).each(function (col) {
            var index = _.map(col.options, 'value').indexOf(defaultMoment[col.name]);
            col.selectedIndex = index < 0 ? 0 : index;
        });
    };
    MultiPickerType.prototype.currentMoment = function (columns, pickerValue) {
        var currentMoment = {};
        if (typeof (pickerValue) == 'string' || moment.isMoment(pickerValue))
            currentMoment = this.defaultMoment(pickerValue);
        else
            columns.forEach(function (column) { return currentMoment[column.name] = column.options[column.selectedIndex].value; });
        return currentMoment;
    };
    MultiPickerType.prototype.generateOptions = function () {
        _.each(this._columns, function (column) { return column.generateOptions(); });
    };
    MultiPickerType.prototype.disableInvalid = function (columns, colName, pickerColIndex, rest) {
        var allowed = (_a = this._columns[colName]).filter.apply(_a, rest);
        _(columns[pickerColIndex].options).each(function (option) {
            option.disabled = !_(allowed).includes(option.value);
        });
        var _a;
    };
    return MultiPickerType;
}());
//# sourceMappingURL=multi-picker-types.js.map